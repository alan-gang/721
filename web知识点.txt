
HTML与css部分

1，  position absolute 与 position fixed 的共同点与不同点。

   共同点：全部脱离文档流，不再占位，默认会压住没有定位的元素。
   异同：绝对定位可以设置相对与定位的父元素。固定定位的父元素是浏览器窗口，再出现滚动条的时候，他距离浏览器窗口的位置不变！

    relative：相对定位。占位，定位原点在自己的左上角。
    absolute： 绝对定位。不占位，定位原点在父元素的左上角上。
    fixed：固定定位。不占位，相对于浏览器窗口定位，不随浏览器滚动条滚动。

2，  什么是fouc？如何避免fouc？

   在IE浏览器中，如果使用了外部导入的样式@import 加载css的话，在浏览器没有缓存css文件的情况下，打开页面的一瞬间就会出内容没有css样式。被称为文档样式短暂缺失。解决办法，用link标签引入css文件



5，  页面引入css的四种方式？

   行内样式，内部样式 link外部引入 @import外部导入（不推荐使用外部导入样式，它不支持javascript改变css样式）

6，  块级元素与行内元素的区别有哪些？

   块级元素默认占满整行，默认的display:block; 可以设置宽高;
   行内元素的大小由内容决定，默认的display:inline; 不能设置宽高，不可以设置上下的外边距；相邻的行内元素会紧随其后出现

7，  css的选择器类型有哪些？

   .class选择器 id选择器 属性选择器 标签名选择器 后代选择器 层级选择器 群组选择器

   优先级  !improtant > 行内 > id选择器 > class > 标签选择器

8，  em 与 rem的区别是什么？

   em的字体大小的根元素是他的父元素，rem字体大小的根元素HTML。

9，  HTML 与 XHTML 的区别是什么？

   XHTML的标签必须被小写，必须被合理的嵌套，文档必须有根元素。 标签必须闭合。属性必须带引号。

10， DOCTYPE 的作用是什么？严格模式与混杂模式有什么区别？

     DOCTYPE告知浏览器以什么方式来渲染页面！处于HTML开始标签的前面。页面的最顶端。
     严格模式下的js与排版，浏览器会议最高标准来执行。
     混杂模式，浏览器会以宽松向后兼容的方式来模拟来是浏览器的行为，以防止站点无法工作。
     漏写DOCTYPE 或者是格式不正确，浏览器都会以混杂模式呈现

11， 你能描述一下渐进增强和优雅降级之间的区别么？

     渐进增强 对于一个老的浏览器来说，保证其最基本的功能，对于高端浏览器，不断地追加和改进页面的样式和效果，以达到更好的用户体验。
     优雅降级，在最初就构建了一个很完整的功能体系，对于老的浏览器，采取向后兼容的方式。
     也就是说优雅降级是从复杂的现状开始，不断地减少用户体验的供给，而渐进增强是从最基础的，能够起作用的版本开始，不断地完善自己，保证未来发展的需要。有就是说，渐进增强是往前看，优雅降级是向后看。但他们同时保证出于安全地带，保证站点正常工作。

12， 请解释一下什么是语义化的HTML？

     新增的标签，如 header, footer, section article,形象的描述了其本身在结构中的作用，这符合HTML内容的结构化，选择合适的标签，便与开发人员阅读，也可以让浏览器更好的解析。在没有css样式的情况下，也可以很清晰的看清楚浏览器的结构。有利于SEO（搜索引擎），可以使搜索引擎更好的获取网页的内容，提升网页的权重。这种语义化的代码支持多端设备浏览器的渲染。


14， CSS3有哪些新的特性？

      边框的圆角(border-radius)，线性渐变(background:linear-gradient)，旋转(rotate)，文本阴影(text-shadow)，阴影(box-shadow)。

15， position absolute 和 position relative 的定位原点是哪里？

     一个是有定位的父元素的左上角，一个是自己原来位置的左上角。

16， display 有哪些值？说明他们的作用？

      display:inline; 行内元素  display-block; 块元素 display:inline-block; display:table;表单样式
      display:none;

17， 实现div居中的五种方法？

     定位三种方法， 变成表单样式一种方法

     (1).两个div嵌套:给父元素的div设置宽，高，边框，相对定位，margin:0 auto，position:revative;
                       子元素的div设置position:absolute;上、下、左、右全部设为0，margin:auto;
     (2).给父元素设置高度，及position:relative;
          子元素设置为:position:absolute; top:50%; 高度为父元素高度的一半，margin-top:为本身高度的一半。
     (3).父元素设为:display:table;
         子元素设为:display:table-cell;vertical-align:middle;
         并且得有第三层元素。
     (4).父元素设置宽，高，边框，margin,display:box;box-back:center;box-align:center;



18， css新增伪类元素有哪些？

     only-of-type;(仅有一个子元素的元素) first-of-type;(父级的第一个元素) last-of-type;  nth-child(); only-child();(父元素中唯一子元素的元素)  :before;(之前)  :after;(之后)  :enabled;(启用) :disabled;(禁用)  :checked;

19,  CSS的选择符有哪些？那些属性可以继承？

      id选择器（ # myid）
      类选择器（.myclassname）
      标签选择器（div, h1, p）
      相邻选择器（h1 + p）
      子选择器（ul > li）
      后代选择器（li a）
      通配符选择器（ * ）
      属性选择器（a[rel = "external"]）
      伪类选择器（a: hover, li: nth - child）
      可继承的样式：
      font-size font-family color, UL LI DL DD DT
      不可继承的样式：
      border padding margin width height!

20,  css盒模型有哪几部分构成？

     W3C标准的盒模型由content，padding，border，margin组成。
     IE的盒模型内容部分包括border 与 padding 两部分.所以是由content和margin组成。

21,   HTML5的form如何关闭自动完成功能？

      1、在IE的Internet选项菜单里2的内容--自动完成里面设置
      2、设置Form的autocomplete为"on"或者"off"来开启或者关闭自动完成功能
      3、设置输入框的autocomplete为"on"或者"off"来开启或者关闭该输入框的自动完成功能！

22,   label的作用是什么？

      就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。
      实现的办法，label的for属性值与表单的id值相同的话就可以实现了。

23， iframe有哪些优点？

       可以原封不动的把网页嵌套进来。
       一个页面可以重复使用，增加代码的重用性。
       遇到第三方加载缓慢的图片与文件，这些问题可以有iframe来解决。
       “缺点”
       会产生很多页面，不容易管理。
       影响页面的并行加载。
       代码复杂，搜索引擎无法索引到。很多移动设备无法显示iframe页面。
       会增加服务器的http请求。

24， html5有哪些新特性、移除了哪些元素？如何处理HTML5新标签的浏览器兼容问题？

    增加了绘画的元素，canvas， 用于媒体播放的video 与 audio元素。本地离线存储。localStorage 与 sessionStorage;
    内容元素，article、footer、header、nav、section。
    表单控件，calendar、date、time、email、url、search。
    控件元素，webworker, websockt, Geolocation。
    移出的元素有下列这些：
    显现层元素：basefont，big，center，font, s，strike，tt，u。
    性能较差元素：frame，frameset，noframes。
25,  简单介绍几个行内元素 与块级元素？空元素有哪些？

      块元素：div h1~h6, ul,li,ol,p;  行内元素: span b u s a
      知名的空元素： <br/> <hr/> <img/> <input/> <link/> <meta/>

26,  什么是BFC？

     块级格式化上下文，也就是说一个独立的渲染区域。它规定了区域内的元素的定位方式，与外界元素无关。自己有一套独立的渲染规则来约束块级盒子的布局。容器里面的元素不会影响到外面的元素。当bfc外部的元素浮动的时候，他通过变窄，而不会与元素重叠，同样的，当内部有浮动的时候，为了不影响外部元素的布局，BFC在计算高度的时候会包括浮动的高度。

27， Meta 标签与搜索引擎优化？

     它给搜索引擎提供了关于网页的信息，这些信息都是隐含信息，也就是说浏览器的本身访问者是看不到的。这个标签放在head标签内，放到body标签外，某些浏览器无法识别。

28， 简述一src与href 的区别?

     src属于标签结构的一部分，属于必不可少的，是引入。href的内容，是与该页面有关联的，属于引用。

     href一般用在 a, link,表示超文本引用。 src表示来源地址，在img，script，iframe等元素上 。

29，  标签上title与alt属性的区别是什么?

     alt属性是在你的图片因为某种原因不能加载时在页面显示的提示信息，它会直接输出在原本加载图片的地方，而title属性是在你鼠标悬停在该元素上时显示一个小提示，鼠标离开就没有了  ！

30，  HTML的table和div布局的优缺点。

      table布局开发时间短，样式简单，没有兼容性的问题，搜索引擎排名高靠前。
      缺点，如果布局变更，页面需要重写，table里面要是包含了div或者ul，兼容性会有问题。加载速度比较慢。


javascript部分

32， 如何对网站的文件和资源进行优化？

     1，文件的合并，目的是减少http请求。减少请求的方案主要与合并javascript和css文件。css sprites图。

     2，GZIP压缩你的JS和CSS文件，减少下载体积。

     3，使用CDN来托管资源；（内容分发网络）;

     4  缓存的使用，并且用多个域名来进行缓存。

33， web前端页面性能优化？

     前端自动化构建。（gulp合并js css 文件）在nodeJS中的gup
     减少http请求。（网络性能的优化）
     CDN（网络托管）
     图片压缩，尽量使用gif图片，减少图片的大小。

34，说一说前端性能优化的方法！

    一 面向内容的优化
    1，减少http请求（文件合并）
    2，使用CDN网络托管（内容分发网络）
    3，避免重定向（URL后面加上/)
    4, 使用Ajax进行缓存
    5, 延迟载入组件
    6，切分组件到多个域
    7，最小化iframe数量。
    8，减少DNS查找。
    二 面向服务器的优化
    1，缩小cookie；

35， 为什么用多个域名存储网站资源会更有效？

      除了节约cookie带宽的因素，另一个重要因素是节约主域名的连接数，从而提高客户端网络带宽的利用率，优化页面响应。因为老的浏览器（IE6是典型），针对同一个域名只允许同时保持两个HTTP连接。将图片等资源请求分配到其他域名上，避免了大图片之类的并不一定重要的内容阻塞住主域名上其他后续资源的连接（比如ajax请求）

36， web Storage，localStorage ， sessionStorage， cookie。 谈谈四个存储

    web Storage 是为了大容量存储而设计的。HTML5里面的webStorage提供了两种存储方式 localStorage与sessionStorage; 包含自定义方法 getItem setItem clear removeItem;
    Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便

    localStorage 一种持久化的本地存储，除非主动删除，否则一直存在。大小在5M左右。可以再所有同源窗口中共享。

    sessionStorage 一种会话级别的本地存储，生命周期在浏览器窗口关闭前有效。大小在5M左右。不可以在不同浏览器的窗口中共享，即使是同一个页面。

    cookie 作为http规范的一部分存在，作用是与服务器进行数据交互，始终在同源的http请求中携带。有路径的概念，可以限制cookie只属于某个路径下，存储大小一般在4K左右。cookie也是在所有的同源窗口中共享。支持和保存很小的数据，如会话标识。不同浏览器对cookie的个数与清理方法也不相同。
    老的IE6以前的浏览器是20条，IE7以后50条，火狐50条。chrome与safary 没有硬性的限制。
    欧朋与IE会定期清理最近不常用的cookie，火狐会随机清理cookie；

37， 什么是cookie隔离？或者说请求资源的时候不要让他带cookie怎么做？

      简单的说就是用多个域名来处理请求，cookie隔离技术则是通过多个非主要域名来请求静态的文件，如果静态文件都放在主域名下，每次请求的时候都会带有cookie，非常浪费流量。实现原理。cookie有域的限制，因此不能跨域提交请求，所以使用非主要域名的时候，请求头中就不会带有cookie，这样做可以降低请求头的大小，降低请求的时间，cookie不传给服务器，也减少了服务器对cookie的处理分析环节，提高了http请求的解析速度。

38， 请说出三种减少页面加载时间的方法？

     1，减少http请求，（合并图片，合并文件）
     2，优化图片文件，减小其尺寸，尤其是缩略图，一定要按尺寸生成缩略图，不要再网页中resize方法
         实现，否则加载数量还是一张大图。
     3，图像格式的选择（GIF）颜色比较少，可用在颜色要求不高的地方。
     4，压缩javascript与CSS代码。
     5，标明高度与宽度。
     6，网址后面加上/对服务器而言，少了以此判断，直接去返回网站设置的存放在根目录下的默认页面；

39， 谈一下你对网页标准的和标准定机构重要性的理解? (W3C万维网络联盟)

     网页标准和标准制定机构都是为了能让web发展的更‘健康’，首先约束浏览器开发者遵循统一的标准，其次约束网站开发者，这样降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。

40， 移动端怎么做好用户体验（IOS Android)？

        开发的时候别用H5开发，混合开发用户体验感不是一般的差。。。。
        开发之前，先要画好UE（产品原型）与UI（视觉效果），确认了之后，再进入开发流程。
        Android用JAVA开发，IOS用OC开发，后台框架随便JAVA也行PHP也行。

        1明确，重点突出的内容 2，菜单和导航 保持简单化 3，流式布局 4，触屏设计 5，表单最小化 放弃图片
        6充分利用手机的特定功能

41， 一个页面从输入URL到页面加载完成，过程中都发生了什么？

        浏览器根据请求的URL交给DNS域名解析，找到IP地址，向服务器发起请求；
        服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；
        浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；载入解析到的资源文件，渲染页面，完成。

42， Google的WEB优化最佳实践方法？

     1，避免死链接。2，避免document.write。3，短的js与css代码写入行内。4，缩小原图像的指定尺寸。5，合并css与js文件。6，利用浏览器进行缓存。7，减少DNS查询。8，利用图片精灵整合小的图片

43， Dom中创建，添加，删除，修改，替换，复制，网页中的标签和文本内容的方法有哪些？

     createDocumentFragment()创建文档片段 creatElement(); creatTextNode(); appendChild(); removeChild();  replaceChild();  cloneNode();

44,  解释一下事件代理？

     通过它可以把事件处理添加到父级元素上，避免了绑定多个子元素事件，提高性能，通过事件代理委托父元素触发事件处理函数。实现主要是依靠事件冒泡机制。

45,  对于javascript的理解

     是一种动态的解析性的语言，他可以改变页面里的数据。是基于对象与事件的客户端脚本语言。

46， 闭包是什么？有什么特性？

    是一个有权访问另一个函数作用域内变量的函数，最常见的创建方法是一个函数内创建另一个函数，特点，突破函数作用域链的限制，将函数内部的变量传递到外部。由于闭包产生的变量的值都保存在内存当中，所以不会被垃圾回收机制回收。导致页面加载内存消耗很大，IE会导致内存泄露。要尽量避免使用，或及时删除变量。

47,  常见的内核有哪些谈一谈你对内核的理解？

     IE:trident; firefox: gecko; opera: persto/blink; safari/chrome:webkie;

     内核分为两部分，渲染引擎还有JS引擎。渲染引擎主要负责获取页面内容，整理页面信息。以及计算机的显示方式，输出显示器。JS引擎主要是执行JS代码来实现页面的动态效果。内核不同，对于浏览器的语法解释也不同，渲染效果也不一样。

48， 常见的兼容性问题？

      1），PNG24的图片在IE6中的背景问题改为PNG8的图片
      2），浏览器默认的margin与padding的不同设置全局的resize css 初始化全局的样式
      3），浮动的IE产生双边距的问题解决方案是在float的标签样式控制中加入 ——display:inline;将其转化为行内属性
      4），自定义属性获得不到的解决方法使用getAttrbuite()
      5），ie没有pageX与pageY属性 Firefox没有X与Y的属性条件注释，缺点是发送额外的http请求
      6）， chrome解决字体最小字体12像素的问题
          加入 CSS 属性 -webkit-text-size-adjust: none; 解决.
      7），怪异模式
           使用html5推荐的写法：<doctype html>
      8），上下margin重合的问题
           同时采用margin:top 或者是margin-bottom
      9）， IE浏览器不支持opacity，解决办法
          filter:alpha(opacity = 60);
      10），IE没有getElementsByClassName方法。


49， JavaScript有几种类型的值？

     两种 基本类型（Boolean，number，string，null，undefined）引用类型（Array，Object，函数）
     基本类型存放在栈内存中，引用类型存放在堆内存中。

50， 原型 原型链？

     每个对象在初始化的时候都有一个属性 就是prototype，访问对象的某个属性的时候，如果对象内部不存在这个属性，就会去执行这个属性，这个原型又会有自己的prototype，于是一直找下去，也就是原型链的概念。（每个对象在创建的时候都有一个prototype属性，如果调用某个方法时，首先会在对象本身查找，如果对象本身没有，就会在自己的prototype原型上查找，prototype又有自己的prototype属性，一直查找下去就形成了，原型链。）

51， js里面事件的三个阶段？

     捕捉， 目标， 冒泡。 IE不支持捕获阶段。

52， 事件是什么？IE和W3C不同绑 定事件的方法 有什么区别 对象里面的e分别代表着什么。如阻止事件冒泡与默认事件？

     事件就是指可以被javascript侦测到的我们在页面上的操作与行为。
     IE没有事件捕获阶段，W3C有事件捕获，目标，冒泡三个阶段。addEventlistener绑定事件专有程序。
     在触发DOM上的某个事件时，会产生一个事件对象event。这个对象中包含着所有与事件有关的信息。包括导致事件的元素，事件的类型以及其他与特定事件相关的信息。
     ie：attachEvent  e代表着window.event w3c : addEventlistener e代表着 event;
     IE  阻止事件冒泡的方法是 cancelBubble = true;  默认事件  returnValue = false;
     w3c 阻止事件冒泡的方法是 return  false e.stopPropagation(); 默认事件 preventDefault();

53， 什么叫做跨域，跨域分为几种?

      跨域分为两种一个iframe跨域，和纯粹的跨域请求
      其实正统的跨全域的解决方法大致也就JSONP ACCESS Control
      严格的说 协议 域名 端口号只要是不同就叫做跨域

54， 什么是函数节流？

      对于常见的场景，如网页滚动时，经常会用滚动到哪做什么样的效果。要注册onscroll事件，如何减少触发次数，达到优化型性能，
      同时又满足效果要求不卡顿。一个是优化事件代码，一个就是函数节流。但部分函数节流都采用时间节流，即时间少于多少不再调用。但同时保证一个最小调用间隔。也可以使用调用次数做节流，但需要考虑最后一次调用需要执行 ！！

55， get和post的区别 如何使用post 怎样合理使用post？

       get一般用于信息获取，使用url传递参数，字符一般在在2000个左右。
       post 一般用于修改服务器上的资源，对所发的信息没有限制。
       get方式需要用request.querystring来取得变量值，而post方式通过request.form来获取变量值。也就是说get通过地址栏传值，post通过提交表单来传值。
       在以下情况下，使用post请求，更新服务器上的文件或数据库
       向服务器发送大量的数据（post没有数据限制）
       发送包含未知字符的用户输入时候，post比get更加稳定，也更可靠！

56， ajax实现过程？

     是一种异步请求数据的一种技术，对于改善用户的体验和程序的性能很有帮助。
     创建XMLHttpRequest对象,也就是创建一个异步调用对象。

     创建一个新的http请求，并指定请求的方法，URL，还有验证信息。
     另外在设置一个响应http请求状态的变化的函数。
     发送http请求，
     获取异步调用返回的数据。
     使用javascript和DOM实现局部刷新。

57， 你能描述一下你制作一个网页的工作流程吗？

      通过UI的设计图，与项目分析页面的内容的层次和逻辑关系，与后台进行协商并建立表格。进行结构设计，写出合理的HTML结构，利用HTML+css进行布局设计。样式首先需要reset.CSS进行页面初始化的重置。加护设计，鼠标的一些特效。行为设计，js代码，ajax页面行为，从服务器获取数据。测试兼容性，优化代码！

58， 平时如何管理你的项目？

      先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；
      编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；
      标注样式编写人，各模块都及时标注（标注关键样式调用的地方）
      页面进行标注（例如 页面 模块 开始和结束）；
      CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；
      JS 分文件夹存放 命名以该JS功能为准的英文翻译。
      图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理'

59， 对NodeJS的优点和缺点提出了自己的看法？

      ' 只用过nodejs的命令，来安装各种版本的js框架。没用过真正的js文件' ！

60， WEB应用从服务器主动推送Data到客户端有哪些方式？

      '主要就是post和get两种方式'！

61， 哪些操作会造成内存泄漏？

     内存泄漏包括常发性内存泄漏，偶发性内存泄漏，一次性，隐式内存泄漏。

     任何对象在自己不再拥有或需要的时候它仍然存在。如果一个对象的引用数量为0，（没有其他对象引用过该对象），或者是该对象的唯一引用是一个循环，那么该对象的内存即可回收。
     setTimeout的第一个参数使用字符串而非函数的话，会引发内存泄漏。闭包，控制台日志，循环（在两个对象彼此引用或者是彼此保留的时候，就会产生一个循环）；

62， document.write和innerHTML的区别？

       document.write是直接写入到页面的内容流。每次写完关闭之后重新调用该函数，会导致页面被重写。
        innerHTML则是DOM页面元素的一个属性，代表该元素的html内容。你可以精确到某一个具体的元素来进行更改。如果想修改document的内容，则需要修改document.documentElement.innerHTML。
        innerHTML很多情况下都优于document.write，其原因在于其允许更精确的控制要刷新页面的那一个部分

63， 同步和异步的区别？

     同步：浏览器访问服务器的请求，用户看的到页面的刷新，重新发送请求，请求完，新内容加载到页面，用户可以进行下一步的操作。
     异步：浏览器访问服务器的请求，用户正常操作，浏览器后端进行请求，请求完，页面局部书安心。用户看的到新内容。

64， javascritp有一方法，这个方法在执行对象查找时，永远不会查找原型，这个方法是？

     hasOwnProperty();

65,  NEW 操作符具体都干了些什么？

     设置了一个空对象，并且设定了原形链， 让函数中的this指向这个空对象。返回值类型的判断。

66， 如何判断一个对象是否属于某个类？

      instanceof(); !

67, JavaScript本地对象，宿主对象，内置对象；

    本地对象：object，Array ，Date，String,Error,可以new实例化的
    内置对象 global(全局没有固定的属性和方法) Math Number Boolean不可实例化的。
    宿主对象： window document

    本地对象是官方定义好的对象，内置对象也是本地对象。

68， JavaScript同源策略？

    同源策略是客户端脚本安全的标准 防止某个文档或脚本从多个不同源载入；
    这里的同源策略指的是：协议，域名，端口相同， 也就是一个脚本只能读取来自同一来源的窗口和文档的属性。

69， 描述一下clientX与clientY,pageX与pageY分别都是干什么用的？

   他们都是事件对象属性，都是指鼠标发生事件的时候触发的鼠标距离屏幕的距离水平与定位的距离。再有滚动条的时候，pageY会比
   clientY更加准确。

70， 什么是变量提升？

     在代码块中的变量声明会被隐式的提升到函数声明的顶部，也就是声明前置。

     var a = 1 ;

     function x() {
        console.log(a);
        if(!a) {
           var a = 10;
        }
       return a
     }

     console.log(x())

71,  什么是跨域传输？

     跨域传输就是在一个域环境下，访问另一个域的内容或者是传值。
     通过js在不同域之间进行数据的传输或通信，利用ajax像一个不同域请求数据，或者通过js获取页面中不同域的框架中(iframe)的数据。只要协议、域名、端口有任何一个不同，都被当作是不同的域。

72， JSONP实现的原理？

     原理：jsonp其实是利用<script src=”url”></script> 动态的指定url，用 get方法去进行http请求，服务器返回执行字符串，但是这个字符串是在window全局作用域下执行的，你需要把他返回到你的代码的作用域内，这里就需要临时创建一个全局的回调函数，并把到传到后台。后台整理数组，并返回前端。让浏览器直接调用，以回调的形式返回到代码流中。

73， null和undefined的区别？

      null是一个表示"无"的对象，转为数值时为0；undefined是一个表示"无"的原始值，转为数值时为NaN。
      undefined：
      （1）变量被声明了，但没有赋值时，就等于undefined。
      （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。
      （3）对象没有赋值的属性，该属性的值为undefined。
      （4）函数没有返回值时，默认返回undefined。
      null：
      （1） 作为函数的参数，表示该函数的参数不是对象。
      （2） 作为对象原型链的终点。

74， ajax 有那些优缺点?如何解决跨域问题?

     1，最大的一点是页面无刷新（局部刷新），用户的体验非常好。
     2、使用异步方式与服务器通信，具有更加迅速的响应能力。
     3、可以把以前一些服务器的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。ajax的原则是“按需取数据”。可以减少多余的请求。
     4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。
      1、ajax不支持浏览器back按钮。
           用AJAX做交互的时候,是通过js+xmlhttp来获取其他页面信息,对于浏览用户来说，是一个隐性的UE，感觉不到浏览器地址栏的URL的变化，对浏览器来说，地址栏的URL没发变化，产生不了HISTORY。
      2、安全问题 AJAX暴露了与服务器交互的细节。
            ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑
      3，对搜素引擎的支持比较弱。
      4，破坏了程序的异常机制，违背了url资源定位对的初衷。
      5，手机端还不能很好的支持。

      Ajax的跨域问题
      默认情况下，XHR对象只能访问与包含它的页面位于同一个域中的资源，这种安全策略可以预防某些恶意行为。
      实现合理的跨域请求对开发某些浏览器应用程序至关重要。
      主要有以下几种方法：
      CORS，跨域资源共享，定义了必须在访问跨域资源时，浏览览器与服务器该如何沟通，基本思想是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是否成功。注意，请求和响应都不包含cookie信息。IE8通过XDomainRequest对象支持CORS，其它浏览器通过XHR对象原生支持CORS。
      图像Ping，多用于动态创建图像。该方式与服务器进行简单、单向的跨域通信。
      它有两个主要缺点，一是只能发送GET请求，二是无法访问服务器的响应文本。

      JSONP，填充式JSON，应用JSON的一种新方法。
      它是被包含在函数调用中的JSON，例如，
      callback（{“name”： “abc”}）；
      JSONP由两部分组成，回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。数据时传入毁掉函数中的JSON数据。

      Comet，是一种服务器向页面推送数据的技术。两种方式可实现，长轮询和流。
      SSE，服务器发送事件。SSE API用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。
      Web Sockets API

75,  对于JSON的了解？

    JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。

76,  js延迟加载的方式有哪些？

      1直接将script节点放置在</body>之前，这样js脚本就会在页面显示出来之后再加载。
      2，使用script标签的defer和async属性，defer属性为延迟加载，是在页面渲染完成之后再进行加载的，而async属性则是和文档并行加载，这两种解决方案都不完美，原因在于不是所有浏览器都支持。
      3，通过监听onload事件，动态添加script节点
      4,通过ajax下载js脚本，动态添加script节点

77,  如何判断当前脚本运行在浏览器还是node环境中？

         通过判断 Global 对象是否为window，如果不为window，当前脚本没有运行在浏览器中

78,  HTTP协议是什么？http状态码有那些？分别代表是什么意思？

      HTTP：超文本传输协议（Hypertext Transfer Protocol）。
      l          基于应用层的协议，在上网浏览网页的时候，浏览器和web服务器之间通过HTTP在Internet上进行数据的发送和接收。
      l          基于请求/响应模式的、无状态的协议。

     100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息

      200 OK 正常返回信息

      201 Created 请求成功并且服务器创建了新的资源

      202 Accepted 服务器已接受请求，但尚未处理

      301 Moved Permanently 请求的网页已永久移动到新位置。

      302 Found 临时性重定向。

      303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。

      304 Not Modified 自从上次请求后，请求的网页未修改过。

      400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。

      401 Unauthorized 请求未授权。

      403 Forbidden 禁止访问。

      404 Not Found 找不到如何与 URI 相匹配的资源。

      500 Internal Server Error 最常见的服务器端错误。

      503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。

79， javascript继承的 6 种方法

     原型继承
     实例继承
     构造继承
     拷贝继承
     介质继承

80， jQuery与Zepto的异同

     1，zepto是为移动端开发的库，是jQuery轻量级的替代品。API与jQuery的类似。文件更小。
     2，最大的优势文件小，只有8K多。
     3，大多数在jQuery中常用的API和方法zepto里面都有。zepto还有一些jquery没有的。
     4，zepto大部分的API都与jQuery兼容，熟悉jQuery，就会熟悉zepto
     5，可以用同样的方式重用jQuery中很多的方法，甚至不用看他的代码。

     zepto有一些触摸事件，比如,swipe,tap.
     不支持IE
     zepto由盒子模型决定，用width返回赋值的width，用.css返回的结果会加上border。
     无法获取隐藏元素的宽高
     没有为原型定义extend方法，jQuery里面有
     zepto的each方法只能是遍历数组，不能遍历json对象。
     zepto在操作dom的selected和checked属性是尽量要用prop方法。
     具体写法 $('option').not(function() {return !this.selected});
     zepto不能完全支持jQuery选择器

81,  js代码中parent，top和self有什么区别？

      parent常用在iframe和frame中的至页面访问父页面中的对象。top：一个页面可能会有多层，top是指最顶层的框架。self：是指当前窗口。

     手写题

82， HTML5离线存储怎么使用？解释一下工作原理？

     HTML5的离线存储是基于一个新建的appache文件，通过文件上的解析清单离线存储资源，这些资源就像cookie一样被存储下来，之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。

83， 几种ie6  BUG的解决方法？

    1.双边距BUG float引起的  使用display：inline
    2.像素问题 使用多个float和注释引起的 使用dislpay:inline -3px
    3.超链接hover 点击后失效  使用正确的书写顺序 link visited hover active
    4.Ie z-index问题 给父级添加position:relative
    5.Png 透明 使用js代码 改
    6.Min-height 最小高度 ！Important 解决’ 7.select 在ie6下遮盖 使用iframe嵌套
    8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）

84， javascript中caller和calle的作用？

     caller返回一个函数的引用，这个函数调用了当前的函数。
     callee返回正在执行的函数本身的引用。他是arguments的一个属性。

85， 事件委托是什么？

      利用事件冒泡的原理，让自己的所触发的事件，交给他的父元素代替

86， javascript原型，原型链？有什么特点？

    每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时， 如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype， 于是就这样一直找下去，也就是我们平时所说的原型链的概念。

    特点：
    JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。

87， evel是做什么用的？

     JOSN字符串转换成JSON对象的方法，也就是把对应的字符串解析成JS代码并且运行，但是不是很安全，非常耗性能（执行两次，一次解析成js语句，一次执行）;

88,  JavaScript作用域链？

     全局函数没有办法查看局部函数的内部细节，但是局部函数可以查看上层函数的细节，甚至全局细节，当需要从局部函数查找某一个属性或者方法的时候，如果当前作用域没有找到，就会像上一层查找全局函数，就形成了作用域链。

89， JSON的了解？

     是一种轻量级的数据交互格式，他是基于javascript的一个子集，数据格式简单，易于读写，占用宽带小。 键值对的集合{}； 值的有序列表[];

90,  null与undefined的区别是什么？

     null表示一个对象被定义，但是值为空。（没有任何属性与方法）
     undefined表示不存在这个值，没有定义。
     null转换成数字是0； undefined转换成数字是NAN
     返回布尔值都是false，判断两个值的时候必须要使用全等。
     的undefined的几种情况：
     1，声明了一个变量，但是没有被赋值。
     2，一个函数的实参少于型参，后面没有对应实参的形参值是undefined。
     3，对象的属性没有值的时候返回的是undefined。
     4，函数没有返回值的时候，默认返回的是undefined。
     null：
     1，作为函数的参数，表示该函数的参数不是对象。
     2，作为对象原型链的终点。

91， ajax有哪些优缺点？如何解决跨域问题？

    优点：
    1、最大的一点是页面无刷新（局部刷新），用户的体验非常好。
    2、使用异步方式与服务器通信，具有更加迅速的响应能力。
    3、可以把以前一些服务器的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。ajax的原则是“按需取数据”。可以减少多余的请求。
    4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。
    缺点
    1、ajax不支持浏览器back按钮。
    用AJAX做交互的时候,是通过js+xmlhttp来获取其他页面信息,对于浏览用户来说，是一个隐性的UE，感觉不到浏览器地址栏的URL的变化，对浏览器来说，地址栏的URL没发变化，产生不了HISTORY。

    2、安全问题 AJAX暴露了与服务器交互的细节。
    ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。a
    3、对搜索引擎的支持比较弱。
    4、破坏了程序的异常机制。
    5、不容易调试。
    比如说违背了url和资源定位的初衷。例如，我给你一个url地址，如果采用了ajax技术，也许你在该url地址下面看到的和我在这个url地址下看到的内容是不同的。这个和资源定位的初衷是相背离的。
    6、一些手持设备（如手机、PDA等）现在还不能很好的支持ajax。
    比如说我们在手机的浏览器上打开采用ajax技术的网站时，它目前是不支持的。

    Ajax的跨域问题
    默认情况下，XHR对象只能访问与包含它的页面位于同一个域中的资源，这种安全策略可以预防某些恶意行为。
    实现合理的跨域请求对开发某些浏览器应用程序至关重要。

    Ajax的跨域问题
    默认情况下，XHR对象只能访问与包含它的页面位于同一个域中的资源，这种安全策略可以预防某些恶意行为。
    实现合理的跨域请求对开发某些浏览器应用程序至关重要。
    主要有以下几种方法：
    CORS，跨域资源共享，定义了必须在访问跨域资源时，浏览览器与服务器该如何沟通，基本思想是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是否成功。注意，请求和响应都不包含cookie信息。IE8通过XDomainRequest对象支持CORS，其它浏览器通过XHR对象原生支持CORS。
    图像Ping，多用于动态创建图像。该方式与服务器进行简单、单向的跨域通信。
    它有两个主要缺点，一是只能发送GET请求，二是无法访问服务器的响应文本。
    JSONP，填充式JSON，应用JSON的一种新方法。
    它是被包含在函数调用中的JSON，例如，
         callback（{“name”： “abc”}）；
    JSONP由两部分组成，毁掉函数和数据。毁掉函数是当响应到来时应该在页面中调用的函数。数据时传入毁掉函数中的JSON数据。
    Comet，是一种服务器向页面推送数据的技术。两种方式可实现，长轮询和流。
    SSE，服务器发送事件。SSE API用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。
    Web Sockets API

手写题！！！！

92， 手写function.bind函数

    Function.prototype.myBind = function(obj) {
       var def = this;

       return funcction() {
          return

           def.call(obj,arguments)
       }
    };

    var Obj = {
       name :'hello';
    };

    var F = function() {
      console.log(this.name);
    }

    f.myBind(obj1)();

93， 用原形的方法实现数组去重？

     var arr = [1,2,2,1,3,3,4,5,5];

     Array.prototype.unique = function() {
        var i=0,len = this.length; obj = {}, newArray = [];

        for(; i<len; i++) {
           if(!obj[this[i]]) {
              obj[this[i]] = true;
              newArray.push(this[i]);
           }
        }
        return newArray;
     }

94， 写一段代码，来实现屏幕的自适应？

    !function(win,doc) {
        var doce = document.documentElement,
            resizeEvent = 'orientationchange' in window? 'orientationchange' : resize;

        var recalc = function() {
          var clientWidth = doc.clientWidth;
          if(!clientWidth) {
          return;
          };
          doce.style.fontSize = 20*(clientWidth/320) + 'px';
        }

       win.addEventListener(resizeEvent, recalc,false);
       doc.addEventlistener('DOMContentLoad',recalc,false);
    }(window,document)

95,  IE标准下有哪些兼容性的写法？

     var event = event || window.event;
     var event.target  || srcElement;
     var document.documentElement.clientWidth || document.body.width;

96， 什么是缓存？缓存的过期时间指的是什么？

      浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。
      浏览器缓存主要有两类：缓存协商：Last-modified ，Etag 和彻底缓存：cache-control，Expires。

97， 服务器端如何获得某个客户的状态？

    对于后台管理员，每一个页面，进来首先要检查是否登录，要是没有登录 直接跳转到登录页面。
    在用户登录时的后，会把他的登录信息放到session里面。（回话）
    登陆成功给他一个session。
    每次登陆都会检查是否有这个session。

98， 列举常见的hack方式(如CSS hack 条件注释)；

     CSS Hack大致有3种表现形式，CSS属性前缀法、选择器前缀法以及IE条件注释法（即HTML头部引用if IE）Hack，实际项目中CSS Hack大部分是针对IE浏览器不同版本之间的表现差异而引入的。 属性前缀法(即类内部Hack)：例如 IE6能识别下划线"_"和星号" * "，IE7能识别星号" * "，但不能识别下划线"_"，IE6~IE10都认识"\9"，但firefox前述三个都不能认识搜索。 选择器前缀法(即选择器Hack)：例如 IE6能识别*html .class{}，IE7能识别*+html .class{}或者*:first-child+html .class{}。 IE条件注释法(即HTML条件注释Hack)：针对所有IE(注：IE10+已经不再支持条件注释)： <!--[if IE]>IE浏览器显示的内容 <![endif]-->，针对IE6及以下版本： <!--[if lt IE 6]>只在IE6-显示的内容 <![endif]-->。这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效

99，  你通常使用是么工具调试和解决浏览器兼容性问题？

     chrome浏览器的调试工具。（直接修改元素，也可以直接修改样式，控制台输出一些东西）还可以配置workspace直接写css样式。

100， 列举常见的浏览器，其中哪些可以分为同一类？分类的规则是什么？

          最新的chorme 与opera 的内核是一样的。blink;

101,  JS有哪些全局函数？ 特别的方法？ 构造函数除外！

      parseInt(); parseFloat(); alert(); isNaN();  eval();  Number();

102,  获取未知长度字符串的后两位的方法？

      var arr = '1234567';

      function getLastString(arr) {
         return arr.substr(arr.length - 2);
      }

      function getLastString(arr) {
         return str.charAt(arr.length - 1) + str.charAt(arr.length -2);
      }

      function getLastString(arr) {
         return str.split('').splice(arr.length - 2, 2).join('');
      }

103,  用代码描述js继承的方法有哪些？

    function animal(name) {
      this.name = name;
    }

    this.prototype.eat = function() {
       console.log(this.name);
    }

    第一种：原型链继承
    直接把父类的对象赋值给子类构造函数的原型，这样子类的对象就可以访问到父类以及父类构造函数的prototype中的属性

    function Cat() {
    };

    Cat.prototype = new Animal('cat');

    var cat = new Cat();

    console.log(cat.name);


   第二种: 构造继承

    function Cat(name){
        Animal.call(this);
        this.name = name || 'Tom';
    };

    第三种：实例继承

    function Cat(name){
        var instance = new Animal();
        instance.name = name || 'Tom';
        return instance;
    }

    var cat = new Cat();

    第四种 拷贝继承

    function Cat(name) {
       var animal = new Animal();
       for(var p in animal) {
         Cat.prototype[p] = anmlai[p];
       }
       Cat.prototype.name = name;
    }

    var cat = new Cat();

    5、组合继承
    核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用

    function Cat(name){
    Animal.call(this);
    this.name = name || 'Tom';
    }
    Cat.prototype = new Animal();

    // Test Code
    var cat = new Cat

    6、寄生组合继承
    核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点

    function Cat(name){
    Animal.call(this);
    this.name = name || 'Tom';
    }
    (function(){
    // 创建一个没有实例方法的类
    var Super = function(){};
    Super.prototype = Animal.prototype;
    //将实例作为子类的原型
    Cat.prototype = new Super();
    })();

104,  描述js中的this，函数表达式、函数声明。 原型/原型链 作用域/作用域链/闭包

   this存在与函数的作用域内。在全局函数下，this指向window。在对象的方法里面this指向这个对象。在一个DOM元素绑定的事件里面，this指向这个DOM元素。一个对象的方法里面的匿名函数的this指向window。

   函数声明与函数表达式
   js的解析器对函数声明与函数表达式并不是一视同仁地对待的。对于函数声明，js解析器会优先读取，确保在所有代码执行之前声明已经被解析，而函数表达式，如同定义其它基本类型的变量一样，只在执行到某一句时也会对其进行解析，所以在实际中，它们还是会有差异的，具体表现在，当使用函数声明的形式来定义函数时，可将调用语句写在函数声明之前，而后者，这样做的话会报错。

   原型/原型链

     每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时， 如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype， 于是就这样一直找下去，也就是我们平时所说的原型链的概念。

   作用域，作用域链

      作用域（scope）
      通常来说一段程序代码中使用的变量和函数并不总是可用的，限定其可用性的范围即作用域，作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。
      作用域链（scope chain）
      作用域链决定了哪些数据能被函数访问。当一个函数创建后，它的作用域链会被创建此函数的作用域中可访问的数据对象填充。

105, 得到1到100之间的素数（指数）？

     function  getPrime(num) {
       var i = 2 ; arr  = [];
       for(; i<num; i++) {
         if(isPrime(i)) {
            arr.push(i);
         }
       }
       return arr;
     }

     function isPrime(num) {
       for(var i=2; i<num; i++) {
          if(num % i == 0) {
             return false;
          }
       }
       return true;
     }

     getPrime(100);

106,   1，得到元素下面的第一个子节点

      第一种方法：

      div.children[0];
      '第二种方法'

      childNodes 得到所有元素的子节点包括属性，文本。表签，注释。 nodeType;的到节点的index

      标签的节点是1
      注释的节点是8
      属性的节点是2
      文本的节点是3

      2, var div = document.getElementById('myDiv');

         var childNodes = div.childNodes;

         function getChildren(node) {
            var arr = [];

            for(var i=0; i<node.length; i++) {
               if(node[i].nodeType == 1) {
                  arr.push(node[i]);
               }
            }
            return arr[0];
         }

         getChildren(childNodes);

      IE删除事件绑定的方法

      detachEvent();

107, 聊项目的时候？1.聊聊你的项目！

    在公司主要负责官网项目，还有后台管理项目。（我们公司所有项目的后台管理都在我这）也参与了APP项目以及微信页面的结构排版，交互效果。

    先说官网项目没有引用什么新的框架，主要使用的 JS框架是jQuery。还有就是引用JSP技术。
    ，我负责官网的结构，交互效果，数据调用。页面初始化用的是JSP表达式，包括结构也是JSP include嵌入的公用的页面结构。向页面的一些交互效果，图片轮播。无缝滚动表单提交，注册都是我写的。首页和一部分分页是由模板生成的。也就是说我写了一套模板的结构，样式与交互效果。通过初始化数据，来控制模板内模块的隐藏与显示。
    用户管理系统
    用bootstap搭的结构，然后主要js框架还是用的jQuery，但是里面涉及的数据交互比较多。主要就是各个项目的后台数据的增删改查功能，以及一些模板设计。请求后台数据的方法我们封装了一个jQuery方法。

    正和岛是一个是实名制的社交网络平台（企业交流平台 企业与企业同为会员的情况下，可以进行项目的相互交流）

    卡富通盈 是给企业做商家管理后台的；

，后期整理的

108，
      web标准一般分为三部分，结构（html），表现（CSS），还有行为（页面与用户的一些交互，也就是JavaScript）。一般是将这三部分独立分开。使其  更具有模块化。
      W3C对web标准提出了规范的要求，也就是一些代码的编写规范
      对于结构化：
      标签要小些。标签要闭合。新标签不允许随意嵌套。
      对于css还有js来说
      尽量使用外链的css样式表和js脚本。
      样式尽量少使用行间的样式。是结构与表现分离。

109，CSS hack的三种方式有哪些？

     1，条件注释  <!--[if IE]>  这段文字只在IE下面生效

     2, 类内属性前缀法  标准模式下 _是IE6专有的hack \9 IE678910 都会生效。\0支持IE8910  \9\0 只对IE910有效。

     3，CSS hack方式三：选择器前缀法;

   extJS的一些特性 是一个基于ajax的框架，支持checkbox全选，动态选择显示哪些列，支持本地的还有远程分页，可以对单元格按照自己的想法进行渲染。

110,  如何判断一个对象属于某个类：
      instanceof 运算符是用来在运行时指出对象是否是特定类的一个实例。instanceof通过返回一个布尔值来指出，这个对象是否是这个特定类或者是它的子类的一个实例。
      用法：
      result = object instanceof class
      参数：
      result
      必选项。任意变量。
      object
      必选项。任意对象表达式。
      class
      必选项。任意已定义的对象类。
      说明：
      如果 object 是 class 的一个实例，则 instanceof 运算符返回 true。如果 object 不是指定类的一个实例，或者 object 是 null，则返回 false。

111, 实现css弹性盒子布局

     .wp {
          display:-webkit-box;
      }

      .wp>div {
          -webkit-box-flex:1;
      }

      .wp>div>div {
          width:200px;
      }

112， 页面实现一个品字布局

      上面的结构设置成宽度百分之百
      下面的各设置为50%；用dbox-sizing:border-box;

123， BOM下的一些常规的操作：

      window.location.href = '打开新的地址'
      window.history.back('返回第几页')
      window.open('在新的页面打开地址')
      window.location.reload()'刷新当前的页面'

124  面向对象的四个特点：
     封装，多态，还有继承 抽象

     构造函数，其实就是一个函数，但是内部使用this变量，对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。
      构造函数是用来创建的对象实例的函数，首先他是一个函数。
      用new方法来调用的函数其实就是构造函数，用函数名来调用的就是正常的函数。

123，添加优酷的视频，采用的标签是embed 里面嵌入的是优酷的视频模板。

124, HTML5 为什么只需要写 <!DOCTYPE HTML>？

     两个合起来就是 html5标准网页声明,原先的是一串很长的字符串,现在是这个简洁形式,支持html5标准的主流浏览器都认识这个声明。

125, 如何区分html与html5？

     主要两种方式， 一是DOCTYPE 还有一种方式是否含有一些语义化的标签

126，浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？

     在线的情况下，浏览器发现Html头部有manifest属性，它会请求manifest文件，如果是第一次访问APP，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过APP并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。 离线的情况下，浏览器就直接使用离线存储的资源。

127， HTML5的离线储存怎么使用，工作原理能不能解释一下？

128， 页面可见性（Page Visibility）API 可以有哪些用途？

       <video autoplay controls id="videoElement">
      <source src="rar.mp4">
      <source src="rar.webm">
      </video>

      <script>
      var videoElement = document.getElementById("videoElement");
      document.addEventListener("visibilitychange", function() {
      　　if (document.hidden) {
      　　　　videoElement.pause();
      　　} else {
      　　　　videoElement.play();
      　　}
      });
      </script

     Page Visibility API已经兼容各主流浏览器 ； IE10, Chrome, Firefox等。

129， 如何在页面上实现一个圆形的可点击区域？

       用border-radius来实现

130，底层的$.ajax请求数据的方法有什么好处？

      1，可以处理报错。有一些属性 data dataType  url type 请求成功后的回调函数 success。error 请求失败的时候调用的函数。timeout 设置请求超时的时间！避免请求大文件时间比较长时候处理的错误！

      $.ajax({
         type:'get',
         dataType:'json',
         url:"地址",
         data:'传递给后台的参数',
         successs:function(response) {
            '请求成功之后接受的回调函数'
         },
         error:function() {
            '如果请求失败可以显示的报错的信息'
         },
         timeOut:'可以设置一个请求的超时时间'。
      });

HTML

Doctype作用？标准模式与兼容模式各有什么区别?

  （1）、<!DOCTYPE>声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。

  （2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。

HTML5 为什么只需要写<!Doctype html>？

 HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；

 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。

行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？

  首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。

  （1）行内元素有：a b span img input select strong（强调的语气）
  （2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p

  （3）常见的空元素：
  <br> <hr> <img> <input> <link> <meta>
  鲜为人知的是：
  <area> <base> <col> <command> <embed> <keygen> <param> <source> <track> <wbr>

页面导入样式时，使用link和@import有什么区别？

  （1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;

  （2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;

  （3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;

介绍一下你对浏览器内核的理解？

常见的浏览器内核有哪些？

  Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]
  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等
  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]
  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]

html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和
HTML5？

    HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。
    绘画 canvas;
    用于媒介回放的 video 和 audio 元素;
    本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;
    sessionStorage 的数据在浏览器关闭后自动删除;
    语意化更好的内容元素，比如 article、footer、header、nav、section;
    表单控件，calendar、date、time、email、url、search;
    新的技术webworker, websocket, Geolocation;

    移除的元素：
    纯表现的元素：basefont，big，center，font, s，strike，tt，u;
    对可用性产生负面影响的元素：frame，frameset，noframes；

    * 支持HTML5新标签：
     IE8/IE7/IE6支持通过document.createElement方法产生的标签，
     可以利用这一特性让这些浏览器支持HTML5新标签，
     浏览器支持新标签后，还需要添加标签默认的样式。

     当然也可以直接使用成熟的框架、比如html5shim;
     <!--[if lt IE 9]>
        <script> src="http://html5shim.googlecode.com/svn/trunk/html5.js"</script>
     <![endif]-->

    * 如何区分HTML5： DOCTYPE声明\新增的结构元素\功能元素

HTML5的离线储存怎么使用，工作原理能不能解释一下？

  在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。
  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。

  如何使用：
  1、页面头部像下面一样加入一个manifest的属性；
  2、在cache.manifest文件的编写离线存储的资源；
  CACHE MANIFEST
  #v0.11
  CACHE:
  js/app.js
  css/style.css
  NETWORK:
  resourse/logo.png
  FALLBACK:
  / /offline.html
  3、在离线状态时，操作window.applicationCache进行需求实现。

浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？

  在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。
  离线的情况下，浏览器就直接使用离线存储的资源。

请描述一下 cookies，sessionStorage 和 localStorage 的区别？

  cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
  cookie数据始终在同源的http请求中携带（即使不需要），也会在浏览器和服务器间来回传递。
  sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。

  存储大小：
  cookie数据大小不能超过4k。
  sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。

  有期时间：
  localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
  sessionStorage  数据在当前浏览器窗口关闭后自动删除。
  cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭

iframe有那些缺点？

  *iframe会阻塞主页面的Onload事件；
  *搜索引擎的检索程序无法解读这种页面，不利于SEO;

  *iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。

  使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript
  动态给iframe添加src属性值，这样可以绕开以上两个问题。

Label的作用是什么？是怎么用的？

  label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。

  <label for="Name">Number:</label>
  <input type="“text“name=" name""="">

  <label>Date:<input type="text"></label>


如何实现浏览器内多个标签页之间的通信? (阿里)

  WebSocket、SharedWorker；
  也可以调用localstorge、cookies等本地存储方式；

  localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，
  我们通过监听事件，控制它的值来进行页面信息通信；
  注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；
  webSocket如何兼容低浏览器？(阿里)

  Adobe Flash Socket 、
  ActiveX HTMLFile (IE) 、
  基于 multipart 编码发送 XHR 、
  基于长轮询的 XHR

页面可见性（Page Visibility API） 可以有哪些用途？

  通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;
  在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；

如何在页面上实现一个圆形的可点击区域？

  1、map+area或者svg
  2、border-radius
  3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等
  实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。

  <div style="height:1px;overflow:hidden;background:red"></div>

网页验证码是干嘛的，是为了解决什么安全问题。

  区分用户是计算机还是人的公共安全自动程序。可以防止恶意破解密码、刷票、论坛灌水；
  有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。

title与h1的区别、b与strong的区别、i与em的区别？

  title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；

  strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<b>是展示强调内容。

 i内容展示为斜体，em表示强调的文本；

Physical Style Elements -- 自然样式标签
b, i, u, s, pre
Semantic Style Elements -- 语义样式标签
strong, em, ins, del, code
应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。
</b></strong>
CSS

介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？

（1）有两种， IE 盒子模型、W3C 盒子模型；
（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；
（3）区  别： IE的content部分把 border 和 padding计算了进去;

CSS优先级算法如何计算？

      *   优先级就近原则，同权重情况下样式定义最近者为准;

      *   载入样式以最后载入的定位为准;

      优先级为:
      !important >  id > class > tag
      important 比 内联优先级高
      CSS3新增伪类有那些？

      举例：
      p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素。
      p:last-of-type  选择属于其父元素的最后 </p><p> 元素的每个 </p><p> 元素。
      p:only-of-type  选择属于其父元素唯一的 </p><p> 元素的每个 </p><p> 元素。
      p:only-child        选择属于其父元素的唯一子元素的每个 </p><p> 元素。
      p:nth-child(2)  选择属于其父元素的第二个子元素的每个 </p><p> 元素。

      :after          在元素之前添加内容,也可以用来做清除浮动。
      :before         在元素之后添加内容
      :enabled
      :disabled       控制表单控件的禁用状态。
      :checked        单选框或复选框被选中。
</p>

如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？

给div设置一个宽度，然后添加margin:0 auto属性

div{
    width:200px;
    margin:0 auto;
 }
居中一个浮动元素

  确定容器的宽高 宽500 高 300 的层
  设置层的外边距

 .div {
      width:500px ; height:300px;//高度可以不设
      margin: -150px 0 0 -250px;
      position:relative;         //相对定位
      background-color:pink;     //方便看效果
      left:50%;
      top:50%;
 }
让绝对定位的div居中

    position: absolute;
    width: 1200px;
    background: none;
    margin: 0 auto;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    display有哪些值？说明他们的作用。

    block         象块类型元素一样显示。
    none          缺省值。象行内元素类型一样显示。
    inline-block  象行内元素一样显示，但其内容象块类型元素一样显示。
    list-item     象块类型元素一样显示，并添加样式列表标记。
    table         此元素会作为块级表格来显示
    inherit       规定应该从父元素继承 display 属性的值

position的值relative和absolute定位原点是？

  absolute
    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。
  fixed （老IE不支持）
    生成绝对定位的元素，相对于浏览器窗口进行定位。
  relative
    生成相对定位的元素，相对于其正常位置进行定位。
  static
    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。
  inherit
    规定从父元素继承 position 属性的值。
CSS3有哪些新特性？

  新增各种CSS选择器    （: not(.input)：所有 class 不是“input”的节点）
  圆角           （border-radius:8px）
  多列布局        （multi-column layout）
  阴影和反射      （Shadow\Reflect）
  文字特效      （text-shadow、）
  文字渲染      （Text-decoration）
  线性渐变      （gradient）
  旋转          （transform）
  增加了旋转,缩放,定位,倾斜,动画，多背景
  transform:\scale(0.85,0.90)\ translate(0px,-30px)\ skew(-9deg,0deg)\Animation:
请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？

 .
用纯CSS创建一个三角形的原理是什么？

把上、左、右三条边隐藏掉（颜色设为 transparent）
#demo {
  width: 0;
  height: 0;
  border-width: 20px;
  border-style: solid;
  border-color: transparent transparent red transparent;
}
一个满屏 品 字布局 如何设计?

简单的方式：
    上面的div宽100%，
    下面的两个div分别宽50%，
    然后用float或者inline使其不换行即可
经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？

* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.

* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。

* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。

  浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}

  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)

  渐进识别的方式，从总体中逐渐排除局部。

  首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。
  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。

  css
      .bb{
          background-color:#f1ee18;/*所有识别*/
          .background-color:#00deff\9; /*IE6、7、8识别*/
          +background-color:#a200ff;/*IE6、7识别*/
          _background-color:#1e0bd1;/*IE6识别*/
      }

*  IE下,可以使用获取常规属性的方法来获取自定义属性,
   也可以使用getAttribute()获取自定义属性;
   Firefox下,只能使用getAttribute()获取自定义属性。
   解决方法:统一通过getAttribute()获取自定义属性。

*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;
   Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。

*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。

*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,
   可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。

超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:
L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}
li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？

行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。
为什么要初始化CSS样式。

- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。

- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。

最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）

淘宝的样式初始化代码：
body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }
body, button, input, select, textarea { font:12px/1.5tahoma, arial, \5b8b\4f53; }
h1, h2, h3, h4, h5, h6{ font-size:100%; }
address, cite, dfn, em, var { font-style:normal; }
code, kbd, pre, samp { font-family:couriernew, courier, monospace; }
small{ font-size:12px; }
ul, ol { list-style:none; }
a { text-decoration:none; }
a:hover { text-decoration:underline; }
sup { vertical-align:text-top; }
sub{ vertical-align:text-bottom; }
legend { color:#000; }
fieldset, img { border:0; }
button, input, select, textarea { font-size:100%; }
table { border-collapse:collapse; border-spacing:0; }
absolute的containing block(容器块)计算方式跟正常流有什么不同？

无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：
1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；
2、否则,则由这个祖先元素的 padding box 构成。
如果都找不到，则为 initial containing block。

补充：
1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）
2. absolute: 向上找最近的定位为absolute/relative的元素
3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block
CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？

position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？

对BFC规范(块级格式化上下文：block formatting context)的理解？

（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）
 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。
 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。
css定义的权重

以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：

/*权重为1*/
div{
}
/*权重为10*/
.class1{
}
/*权重为100*/
#id1{
}
/*权重为100+1=101*/
#id1 div{
}
/*权重为10+1=11*/
.class1 div{
}
/*权重为10+10+1=21*/
.class1 .class2 div{
}

如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现
请解释一下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式

移动端的布局用过媒体查询吗？

使用 CSS 预处理器吗？喜欢那个？

SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)
CSS优化、提高性能的方法有哪些？

浏览器是怎样解析CSS选择器的？

在网页中的应该使用奇数还是偶数的字体？为什么呢？

margin和padding分别适合什么场景使用？

抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]

元素竖向的百分比设定是相对于容器的高度吗？

全屏滚动的原理是什么？用到了CSS的那些属性？

什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？

视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）

::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。

如何修改chrome记住密码后自动填充表单的黄色背景 ？

你对line-height是如何理解的？

设置元素浮动后，该元素的display值是多少？（自动变成display:block）

怎么让Chrome支持小于12px 的文字？

让页面里的字体变清晰，变细用CSS怎么做？（-webkit-font-smoothing: antialiased;）

font-style属性可以让它赋值为“oblique” oblique是什么意思？

position:fixed;在android下无效怎么处理？

如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）

多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms
display:inline-block 什么时候会显示间隙？(携程)

移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing
overflow: scroll时不能平滑滚动的问题怎么处理？

有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。

png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？

什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）

如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，
所以不如隔离开。

因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，
这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。

同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，
提高了webserver的http请求的解析速度。
style标签写在body后与body前有什么区别？

什么是CSS 预处理器 / 后处理器？

- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，
  还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。

- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的
  是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。
JavaScript

介绍js的基本数据类型。

 Undefined、Null、Boolean、Number、String
介绍js有哪些内置对象？

Object 是 JavaScript 中所有对象的父对象

数据封装类对象：Object、Array、Boolean、Number 和 String
其他对象：Function、Arguments、Math、Date、RegExp、Error
说几条写JavaScript的基本规范？

1.不要在同一行声明多个变量。
2.请使用 ===/!==来比较true/false或者数值
3.使用对象字面量替代new Array这种形式
4.不要使用全局函数。
5.Switch语句必须带有default分支
6.函数不应该有时候有返回值，有时候没有返回值。
7.For循环必须使用大括号
8.If语句必须使用大括号
9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。
JavaScript原型，原型链 ? 有什么特点？

每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，
如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，
于是就这样一直找下去，也就是我们平时所说的原型链的概念。
关系：instance.constructor.prototype = instance.__proto__

特点：
JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。

 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，
 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。
    function Func(){}
    Func.prototype.name = "Sean";
    Func.prototype.getInfo = function() {
      return this.name;
    }
    var person = new Func();//现在可以参考var person = Object.create(oldObject);
    console.log(person.getInfo());//它拥有了Func的属性和方法
    //"Sean"
    console.log(Func.prototype);
    // Func { name="Sean", getInfo=function()}
JavaScript有几种类型的值？，你能画一下他们的内存图吗？

栈：原始数据类型（Undefined，Null，Boolean，Number、String）
堆：引用数据类型（对象、数组和函数）

两种类型的区别是：存储位置不同；
原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；
引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其
在栈中的地址，取得地址后从堆中获得实体
Stated Clearly Image

Javascript如何实现继承？

1、构造继承
2、原型继承
3、实例继承
4、拷贝继承

原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。

 function Parent(){
        this.name = 'wang';
    }

    function Child(){
        this.age = 28;
    }
    Child.prototype = new Parent();//继承了Parent，通过原型

    var demo = new Child();
    alert(demo.age);
    alert(demo.name);//得到被继承的属性
  }
JavaScript继承的几种实现方式？

参考：构造函数的继承，非构造函数的继承；
javascript创建对象的几种方式？

javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。

1、对象字面量的方式

    person={firstname:"Mark",lastname:"Yun",age:25,eyecolor:"black"};

2、用function来模拟无参的构造函数

    function Person(){}
    var person=new Person();//定义一个function，如果使用new"实例化",该function可以看作是一个Class
    person.name="Mark";
    person.age="25";
    person.work=function(){
    alert(person.name+" hello...");
    }
    person.work();

3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）

    function Pet(name,age,hobby){
       this.name=name;//this作用域：当前对象
       this.age=age;
       this.hobby=hobby;
       this.eat=function(){
          alert("我叫"+this.name+",我喜欢"+this.hobby+",是个程序员");
       }
    }
    var maidou =new Pet("麦兜",25,"coding");//实例化、创建对象
    maidou.eat();//调用eat方法

4、用工厂方式来创建（内置对象）

     var wcDog =new Object();
     wcDog.name="旺财";
     wcDog.age=3;
     wcDog.work=function(){
       alert("我是"+wcDog.name+",汪汪汪......");
     }
     wcDog.work();

5、用原型方式来创建

    function Dog(){

     }
     Dog.prototype.name="旺财";
     Dog.prototype.eat=function(){
     alert(this.name+"是个吃货");
     }
     var wangcai =new Dog();
     wangcai.eat();

5、用混合方式来创建

    function Car(name,price){
      this.name=name;
      this.price=price;
    }
     Car.prototype.sell=function(){
       alert("我是"+this.name+"，我现在卖"+this.price+"万元");
      }
    var camry =new Car("凯美瑞",27);
    camry.sell();
Javascript作用链域?

全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。
当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，
直至全局函数，这种组织形式就是作用域链。
谈谈This对象的理解。

this总是指向函数的直接调用者（而非间接调用者）；
如果有new关键字，this指向new出来的那个对象；
在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；
eval是做什么的？

它的功能是把对应的字符串解析成JS代码并运行；
应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。
由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')');
什么是window对象? 什么是document对象?

null，undefined 的区别？

null        表示一个对象被定义了，值为“空值”；
undefined   表示不存在这个值。

typeof undefined
    //"undefined"
    undefined :是一个表示"无"的原始值或者说表示"缺少值"，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；
    例如变量被声明了，但没有赋值时，就等于undefined

typeof null
    //"object"
    null : 是一个对象(空对象, 没有任何属性和方法)；
    例如作为函数的参数，表示该函数的参数不是对象；

注意：
    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined

再来一个例子：

    null
    Q：有张三这个人么？
    A：有！
    Q：张三有房子么？
    A：没有！

    undefined
    Q：有张三这个人么？
    A：没有！
参考阅读：undefined与null的区别

写一个通用的事件侦听器函数。

    // event(事件)工具集，来源：github.com/markyun
    markyun.Event = {
        // 页面加载完成后
        readyEvent : function(fn) {
            if (fn==null) {
                fn=document;
            }
            var oldonload = window.onload;
            if (typeof window.onload != 'function') {
                window.onload = fn;
            } else {
                window.onload = function() {
                    oldonload();
                    fn();
                };
            }
        },
        // 视能力分别使用dom0||dom2||IE方式 来绑定事件
        // 参数： 操作的元素,事件名称 ,事件处理程序
        addEvent : function(element, type, handler) {
            if (element.addEventListener) {
                //事件类型、需要执行的函数、是否捕捉
                element.addEventListener(type, handler, false);
            } else if (element.attachEvent) {
                element.attachEvent('on' + type, function() {
                    handler.call(element);
                });
            } else {
                element['on' + type] = handler;
            }
        },
        // 移除事件
        removeEvent : function(element, type, handler) {
            if (element.removeEventListener) {
                element.removeEventListener(type, handler, false);
            } else if (element.datachEvent) {
                element.detachEvent('on' + type, handler);
            } else {
                element['on' + type] = null;
            }
        },
        // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)
        stopPropagation : function(ev) {
            if (ev.stopPropagation) {
                ev.stopPropagation();
            } else {
                ev.cancelBubble = true;
            }
        },
        // 取消事件的默认行为
        preventDefault : function(event) {
            if (event.preventDefault) {
                event.preventDefault();
            } else {
                event.returnValue = false;
            }
        },
        // 获取事件目标
        getTarget : function(event) {
            return event.target || event.srcElement;
        },
        // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；
        getEvent : function(e) {
            var ev = e || window.event;
            if (!ev) {
                var c = this.getEvent.caller;
                while (c) {
                    ev = c.arguments[0];
                    if (ev && Event == ev.constructor) {
                        break;
                    }
                    c = c.caller;
                }
            }
            return ev;
        }
    };
["1", "2", "3"].map(parseInt) 答案是多少？

 [1, NaN, NaN] 因为 parseInt 需要两个参数 (val, radix)，
 其中 radix 表示解析时用的基数。
 map 传了 3 个 (element, index, array)，对应的 radix 不合法导致解析失败。
事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？

 1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。
 2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；
 3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）
什么是闭包（closure），为什么要用它？

闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。

闭包的特性：

1.函数内再嵌套函数
2.内部函数可以引用外层的参数和变量
3.参数和变量不会被垃圾回收机制回收

//li节点的onclick事件都能正确的弹出当前被点击的li索引
 <ul>
    <li> index = 0</li>
    <li> index = 1</li>
    <li> index = 2</li>
    <li> index = 3</li>
</ul>
<script type="text/javascript">
    var nodes = document.getElementsByTagName("li");
    for(i = 0;i<nodes.length;i+= 1){
        nodes[i].onclick = function(){
            console.log(i+1);//不用闭包的话，值每次都是4
        }(i);
    }
</script>

执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在
使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源
因为say667()的内部函数的执行需要依赖say667()中的变量
这是对闭包作用的非常直白的描述

  function say667() {
    // Local variable that ends up within closure
    var num = 666;
    var sayAlert = function() {
        alert(num);
    }
    num++;
    return sayAlert;
}

 var sayAlert = say667();
 sayAlert()//执行结果应该弹出的667
javascript 代码中的"use strict";是什么意思 ? 使用它区别是什么？

use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,

使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。
默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;
全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；
消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;

提高编译器效率，增加运行速度；
为未来新版本的Javascript标准化做铺垫。
如何判断一个对象是否属于某个类？

  使用instanceof （待完善）
   if(a instanceof Person){
       alert('yes');
   }
new操作符具体干了什么呢?

     1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
     2、属性和方法被加入到 this 引用的对象中。
     3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。

var obj  = {};
obj.__proto__ = Base.prototype;
Base.call(obj);
用原生JavaScript的实现过什么功能吗？

Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？

hasOwnProperty

javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。
使用方法：
object.hasOwnProperty(proName)
其中参数object是必选项。一个对象的实例。
proName是必选项。一个属性名称的字符串值。

如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。
JSON 的了解？

JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。
它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小
如：{"age":"12", "name":"back"}

JSON字符串转换为JSON对象:
var obj =eval('('+ str +')');
var obj = str.parseJSON();
var obj = JSON.parse(str);

JSON对象转换为JSON字符串：
var last=obj.toJSONString();
var last=JSON.stringify(obj);
[].forEach.call($$("*"),function(a){a.style.outline="1px solid #"+(~~(Math.random()*(1<<24))).tostring(16)})< code=""> 能解释一下这段代码的意思吗？</24))).tostring(16)})<>

js延迟加载的方式有哪些？

defer和async、动态创建DOM方式（用得最多）、按需异步载入js
Ajax 是什么? 如何创建一个Ajax？

ajax的全称：Asynchronous Javascript And XML。
异步传输+js+xml。
所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。

(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象
(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息
(3)设置响应HTTP请求状态变化的函数
(4)发送HTTP请求
(5)获取异步调用返回的数据
(6)使用JavaScript和DOM实现局部刷新
同步和异步的区别?

同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.

同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。

异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。

（待完善）

如何解决跨域问题?

jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面
页面编码和被请求的资源编码如果不一致如何处理？

模块化开发怎么做？

立即执行函数,不暴露私有成员

    var module1 = (function(){
    　　　　var _count = 0;
    　　　　var m1 = function(){
    　　　　　　//...
    　　　　};
    　　　　var m2 = function(){
    　　　　　　//...
    　　　　};
    　　　　return {
    　　　　　　m1 : m1,
    　　　　　　m2 : m2
    　　　　};
    　　})();
（待完善）

AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？

AMD 规范在这里：https://github.com/amdjs/amdjs-api/wiki/AMD

CMD 规范在这里：https://github.com/seajs/seajs/issues/242

Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。

 区别：

    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.
    2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：

// CMD
define(function(require, exports, module) {
    var a = require('./a')
    a.doSomething()
    // 此处略去 100 行
    var b = require('./b') // 依赖可以就近书写
    b.doSomething()
    // ...
})

// AMD 默认推荐
define(['./a', './b'], function(a, b) { // 依赖必须一开始就写好
    a.doSomething()
    // 此处略去 100 行
    b.doSomething()
    // ...
})
requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何
缓存的？）

谈一谈你对ECMAScript6的了解？

ECMAScript6 怎么写class么，为什么会出现class这种东西?

异步加载JS的方式有哪些？

  (1) defer，只支持IE

  (2) async：

  (3) 创建script，插入到DOM中，加载完毕后callBack
documen.write和 innerHTML的区别

document.write只能重绘整个页面

innerHTML可以重绘页面的一部分
DOM操作——怎样添加、移除、移动、复制、创建和查找节点?

（1）创建新节点
  createDocumentFragment()    //创建一个DOM片段
  createElement()   //创建一个具体的元素
  createTextNode()   //创建一个文本节点
（2）添加、移除、替换、插入
  appendChild()
  removeChild()
  replaceChild()
  insertBefore() //在已有的子节点前插入一个新的子节点
（3）查找
  getElementsByTagName()    //通过标签名称
  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)
  getElementById()    //通过元素Id，唯一性
.call() 和 .apply() 的区别？

  基本都是实现了对象冒充，所谓对象冒充就是在不同的作用域下进行函数的调用，二者的区别call方法从第二个参数开始，传递给该函数的值以逗号的形式分隔，apply方法传递给函数的值以数组的形式进行传递。比如说一个全局作用域下的函数，利用call和apply第一个参数可指定在其他作用域下进行调用。


  例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);



  注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。

    function add(a,b)
    {
        alert(a+b);
    }

    function sub(a,b)
    {
        alert(a-b);
    }

    add.call(sub,3,1);
数组和对象有哪些原生方法，列举一下？

JS 怎么实现一个类。怎么实例化这个类

JavaScript中的作用域与变量声明提升？

如何编写高性能的Javascript？

那些操作会造成内存泄漏？

JQuery的源码看过吗？能不能简单概况一下它的实现原理？

jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？

jquery中如何将数组转化为json字符串，然后再转化回来？

jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？

jquery.extend 与 jquery.fn.extend的区别？

jQuery 的队列是如何实现的？队列可以用在哪些地方？

谈一下Jquery中的bind(),live(),delegate(),on()的区别？

JQuery一个对象可以同时绑定多个事件，这是如何实现的？

是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？

jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）

针对 jQuery性能的优化方法？

Jquery与jQuery UI 有啥区别？

*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。

*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。
 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等
JQuery的源码看过吗？能不能简单说一下它的实现原理？

jquery 中如何将数组转化为json字符串，然后再转化回来？

jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：

    $.fn.stringifyArray = function(array) {
        return JSON.stringify(array)
    }

    $.fn.parseArray = function(array) {
        return JSON.parse(array)
    }

    然后调用：
    $("").stringifyArray(array)
jQuery和Zepto的区别？各自的使用场景？

针对 jQuery 的优化方法？

*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。

*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。
 比如：var str=$("a").attr("href");

*for (var i = size; i < arr.length; i++) {}
 for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：
 for (var i = size, length = arr.length; i < length; i++) {}
Zepto的点透问题如何解决？

jQueryUI如何自定义组件?

需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？

如何判断当前脚本运行在浏览器还是node环境中？（阿里）

通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中
移动端最小触控区域是多大？

jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?

把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？

移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）

知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么?

Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？

解释JavaScript中的作用域与变量声明提升？

那些操作会造成内存泄漏？

内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。
垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。

setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。
闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）
JQuery一个对象可以同时绑定多个事件，这是如何实现的？

Node.js的适用场景？

(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?

解释一下 Backbone 的 MVC 实现方式？

什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?

知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?

如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?

前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?

简述一下 Handlebars 的基本用法？

简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？

用js实现千位分隔符?(来源：前端农民工，提示：正则+replace)

function commafy(num) {
     num = num + '';
     var reg = /(-?d+)(d{3})/;

    if(reg.test(num)){
     num = num.replace(reg, '$1,$2');
    }
    return num;
}
检测浏览器版本版本有哪些方式？

功能检测、userAgent特征检测

比如：navigator.userAgent
//"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36
  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"
What is a Polyfill?

polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。
例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，
所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，
一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。
做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？

比如： html5shiv、Geolocation、Placeholder

我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？

ECMAScript6 相关

Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？

两等号判等，会在比较时进行类型转换；
三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）；

Object.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，
但 Object.is(NaN, NaN) 会返回 true.

Object.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。
前端框架相关

react-router 路由系统的实现原理？

React中如何解决第三方类库的问题?

原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？

设计模式 知道什么是singleton, factory, strategy, decrator么?

常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？

页面重构怎么操作？

网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。
也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。

对于传统的网站来说重构通常是：

表格(table)布局改为DIV+CSS
使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)
对于移动平台的优化
针对于SEO进行优化
深层次的网站重构应该考虑的方面

减少代码间的耦合
让代码保持弹性
严格按规范编写代码
设计可扩展的API
代替旧有的框架、语言(如VB)
增强用户体验
通常来说对于速度的优化也包含在重构中

压缩JS、CSS、image等前端资源(通常是由服务器来解决)
程序的性能优化(如数据读写)
采用CDN来加速资源加载
对于JS DOM的优化
HTTP服务器的文件缓存
列举IE与其他浏览器不一样的特性？

1、事件不同之处：

    触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；

    获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；

    阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；

    停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；
99%的网站都需要被重构是那本书上写的？

网站重构：应用web标准进行设计（第2版）
什么叫优雅降级和渐进增强？

优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。
如：border-shadow

渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。
如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；
是否了解公钥加密和私钥加密。

一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;
HTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。
WEB应用从服务器主动推送Data到客户端有那些方式？

html5提供的Websocket
不可见的iframe
WebSocket通过Flash
XHR长时间连接
XHR Multipart Streaming
<script>标签的长时间连接(可跨域)
对Node的优点和缺点提出了自己的看法？

*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，
  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。
  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，
  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。

*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，
  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。
你有用过哪些前端性能优化的方法？

  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。

  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数

  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。

  （4） 当需要设置的样式很多时设置className而不是直接操作style。

  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。

  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。

  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。

  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。
  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。
http状态码有那些？分别代表是什么意思？

    简单版
    [
        100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息
        200  OK         正常返回信息
        201  Created    请求成功并且服务器创建了新的资源
        202  Accepted   服务器已接受请求，但尚未处理
        301  Moved Permanently  请求的网页已永久移动到新位置。
        302 Found       临时性重定向。
        303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。
        304  Not Modified 自从上次请求后，请求的网页未修改过。

        400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。
        401 Unauthorized 请求未授权。
        403 Forbidden   禁止访问。
        404 Not Found   找不到如何与 URI 相匹配的资源。

        500 Internal Server Error  最常见的服务器端错误。
        503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。
    ]

  完整版
  1**(信息类)：表示接收到请求并且继续处理
    100——客户必须继续发出请求
    101——客户要求服务器根据请求转换HTTP协议版本

  2**(响应成功)：表示动作被成功接收、理解和接受
    200——表明该请求被成功地完成，所请求的资源发送回客户端
    201——提示知道新文件的URL
    202——接受和处理、但处理未完成
    203——返回信息不确定或不完整
    204——请求收到，但返回信息为空
    205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件
    206——服务器已经完成了部分用户的GET请求

  3**(重定向类)：为了完成指定的动作，必须接受进一步处理
    300——请求的资源可在多处得到
    301——本网页被永久性转移到另一个URL
    302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。
    303——建议客户访问其他URL或访问方式
    304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用
    305——请求的资源必须从服务器指定的地址得到
    306——前一版本HTTP中使用的代码，现行版本中不再使用
    307——申明请求的资源临时性删除

  4**(客户端错误类)：请求包含错误语法或不能正确执行
    400——客户端请求有语法错误，不能被服务器所理解
    401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
    HTTP 401.1 - 未授权：登录失败
    　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败
    　　HTTP 401.3 - ACL 禁止访问资源
    　　HTTP 401.4 - 未授权：授权被筛选器拒绝
    HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败
    402——保留有效ChargeTo头响应
    403——禁止访问，服务器收到请求，但是拒绝提供服务
    HTTP 403.1 禁止访问：禁止可执行访问
    　　HTTP 403.2 - 禁止访问：禁止读访问
    　　HTTP 403.3 - 禁止访问：禁止写访问
    　　HTTP 403.4 - 禁止访问：要求 SSL
    　　HTTP 403.5 - 禁止访问：要求 SSL 128
    　　HTTP 403.6 - 禁止访问：IP 地址被拒绝
    　　HTTP 403.7 - 禁止访问：要求客户证书
    　　HTTP 403.8 - 禁止访问：禁止站点访问
    　　HTTP 403.9 - 禁止访问：连接的用户过多
    　　HTTP 403.10 - 禁止访问：配置无效
    　　HTTP 403.11 - 禁止访问：密码更改
    　　HTTP 403.12 - 禁止访问：映射器拒绝访问
    　　HTTP 403.13 - 禁止访问：客户证书已被吊销
    　　HTTP 403.15 - 禁止访问：客户访问许可过多
    　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效
    HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效
    404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL
    405——用户在Request-Line字段定义的方法不允许
    406——根据用户发送的Accept拖，请求资源不可访问
    407——类似401，用户必须首先在代理服务器上得到授权
    408——客户端没有在用户指定的饿时间内完成请求
    409——对当前资源状态，请求不能完成
    410——服务器上不再有此资源且无进一步的参考地址
    411——服务器拒绝用户定义的Content-Length属性请求
    412——一个或多个请求头字段在当前请求中错误
    413——请求的资源大于服务器允许的大小
    414——请求的资源URL长于服务器允许的长度
    415——请求资源不支持请求项目格式
    416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段
    417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。

  5**(服务端错误类)：服务器不能正确执行一个正确的请求
    HTTP 500 - 服务器遇到错误，无法完成请求
    　　HTTP 500.100 - 内部服务器错误 - ASP 错误
    　　HTTP 500-11 服务器关闭
    　　HTTP 500-12 应用程序重新启动
    　　HTTP 500-13 - 服务器太忙
    　　HTTP 500-14 - 应用程序无效
    　　HTTP 500-15 - 不允许请求 global.asa
    　　Error 501 - 未实现
  HTTP 502 - 网关错误
  HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常

一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）

  详细版：
    1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;
    2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;
    3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;
    4、进行HTTP协议会话，客户端发送报头(请求报头);
    5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;
    6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;
    7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;
    8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;
    9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;
    10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。

  简洁版：
    浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；
    服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；
    浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；
    载入解析到的资源文件，渲染页面，完成。

从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?

你用的得心应手用的熟练地编辑器&开发环境是什么样子？

Sublime Text 3 + 相关插件编写前端代码
Google chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能
Node.js+Gulp
git 用于版本控制和Code Review

前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，

参与项目，快速高质量完成实现效果图，精确到1px；

与团队成员，UI设计，产品经理的沟通；

做好的页面结构，页面重构和用户体验；

处理hack，兼容、写出优美的代码格式；

针对服务器的优化、拥抱最新前端技术。
你怎么看待Web App 、hybrid App、Native App？

你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）

平时如何管理你的项目？

先期团队必须确定好全局样式（global.css），编码模式(utf-8) 等；

编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；

标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；

页面进行标注（例如 页面 模块 开始和结束）；

CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；

JS 分文件夹存放 命名以该JS功能为准的英文翻译。

图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理
如何设计突发大规模并发架构？

说说最近最流行的一些东西吧？常去哪些网站？

    ES6\WebAssembly\Node\MVVM\Web Components\React\React Native\Webpack 组件化
知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?

移动端（Android IOS）怎么做好用户体验?
 1,重点内容要做到突出，导航栏还有菜单要做到简洁化，流式布局，合理的触屏设计。表单元素放弃图片。充分利用手机的特性。

简单描述一下你做过的移动APP项目研发流程？

你认为怎样才是全端工程师（Full Stack developer）？

是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？

项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？


中间的结构的最后


